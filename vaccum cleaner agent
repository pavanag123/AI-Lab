In [3]:
def notClean(floor):
    for row in floor:
        if 1 in row:
            return True;
    return False
In [9]:
def clean(floor, i, j):
    goRight = True
    
    while notClean(floor):
        # Print Floor
        print_floor(floor, i, j)
        # Clean
        if floor[i][j]:
            floor[i][j] = 0;
        # Decide Direction and Move (Zig-Zag)
        if j == len(floor[i])-1 and goRight:
            i, right = (i + 1) % len(floor), False
            continue
        elif j == 0 and not goRight:
            i, right = (i + 1) % len(floor), True
            continue
        else:
            j = j + 1 if goRight else j - 1
        
    # Cleaned Floor
    print_floor(floor, -1, -1)
In [7]:
def print_floor(floor, curr_row, curr_col): 
    for row in range(len(floor)):
        for col in range(len(floor[row])):
            if (curr_row, curr_col) == (row, col):
                print(" >", floor[row][col], "< ", end='', sep='')
            else:
                print("  ", floor[row][col], "  ", end='', sep='')
        print()
    print()
In [10]:
# Test 1
floor = [[1, 0, 0, 0],
         [0, 1, 0, 1],
         [1, 0, 1, 1]]

clean(floor, 0, 0)
 >1<   0    0    0  
  0    1    0    1  
  1    0    1    1  

  0   >0<   0    0  
  0    1    0    1  
  1    0    1    1  

  0    0   >0<   0  
  0    1    0    1  
  1    0    1    1  

  0    0    0   >0< 
  0    1    0    1  
  1    0    1    1  

  0    0    0    0  
  0    1    0   >1< 
  1    0    1    1  

  0    0    0    0  
  0    1   >0<   0  
  1    0    1    1  

  0    0    0    0  
  0   >1<   0    0  
  1    0    1    1  

  0    0    0    0  
 >0<   0    0    0  
  1    0    1    1  

  0    0    0    0  
  0    0    0    0  
 >1<   0    1    1  

  0    0    0    0  
  0    0    0    0  
  0   >0<   1    1  

  0    0    0    0  
  0    0    0    0  
  0    0   >1<   1  

  0    0    0    0  
  0    0    0    0  
  0    0    0   >1< 

  0    0    0    0  
  0    0    0    0  
  0    0    0    0  

In [11]:
# Test 2
floor = [[1, 1, 0, 0, 1, 0, 0],
         [0, 0, 0, 1, 0, 0, 0],
         [0, 1, 1, 1, 1, 1, 1],
         [0, 1, 0, 1, 0, 1, 0]]

clean(floor, 3, 4)
  1    1    0    0    1    0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1   >0<   1    0  

  1    1    0    0    1    0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0   >1<   0  

  1    1    0    0    1    0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0   >0< 

  1    1    0    0    1    0   >0< 
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  1    1    0    0    1   >0<   0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  1    1    0    0   >1<   0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  1    1    0   >0<   0    0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  1    1   >0<   0    0    0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  1   >1<   0    0    0    0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

 >1<   0    0    0    0    0    0  
  0    0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
 >0<   0    0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0   >0<   0    1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0   >0<   1    0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0   >1<   0    0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0   >0<   0    0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0   >0<   0  
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0   >0< 
  0    1    1    1    1    1    1  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    1    1    1    1    1   >1< 
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    1    1    1    1   >1<   0  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    1    1    1   >1<   0    0  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    1    1   >1<   0    0    0  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    1   >1<   0    0    0    0  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0   >1<   0    0    0    0    0  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
 >0<   0    0    0    0    0    0  
  0    1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
 >0<   1    0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0   >1<   0    1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0   >0<   1    0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0    0   >1<   0    0    0  

  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  
  0    0    0    0    0    0    0  

In [12]:
N = int(input('Enter number of rows: '))
M = int(input('Enter number of cols: '))

floor = []
print('Enter the rows')
for i in range(N):
    row = list(map(int, input().split()))
    floor.append(row)
    
start_row = int(input('Enter starting row (0-indexed): '))
start_col = int(input('Enter starting column (0-indexed): '))
clean(floor, start_row, start_col)
Enter number of rows: 3
Enter number of cols: 4
Enter the rows
1 0 0 0
0 1 0 1
1 0 1 1
Enter starting row: 0
Enter starting column: 0
 >1<   0    0    0  
  0    1    0    1  
  1    0    1    1  

  0   >0<   0    0  
  0    1    0    1  
  1    0    1    1  

  0    0   >0<   0  
  0    1    0    1  
  1    0    1    1  

  0    0    0   >0< 
  0    1    0    1  
  1    0    1    1  

  0    0    0    0  
  0    1    0   >1< 
  1    0    1    1  

  0    0    0    0  
  0    1   >0<   0  
  1    0    1    1  

  0    0    0    0  
  0   >1<   0    0  
  1    0    1    1  

  0    0    0    0  
 >0<   0    0    0  
  1    0    1    1  

  0    0    0    0  
  0    0    0    0  
 >1<   0    1    1  

  0    0    0    0  
  0    0    0    0  
  0   >0<   1    1  

  0    0    0    0  
  0    0    0    0  
  0    0   >1<   1  

  0    0    0    0  
  0    0    0    0  
  0    0    0   >1< 

  0    0    0    0  
  0    0    0    0  
  0    0    0    0  

In [ ]:
